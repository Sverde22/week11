---
import type { APIRoute } from "astro"; // Importing Astro's APIRoute type.
import { supabase } from "../lib/supabase"; // Importing the Supabase client.
import Navigation from '../components/Navigation.astro';
---

<Navigation />
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Administrator</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #23c3e0;
            margin: 0;
            padding: 0;
        }
        main {
            padding: 20px;
            max-width: 800px;
            margin: auto;
        }
        table {
            width: 100%;
            margin-top: 20px;
            border-collapse: collapse;
        }
        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        button {
            background-color: #f44336;
            color: rgb(71, 42, 42);
            border: none;
            padding: 8px 16px;
            cursor: pointer;
        }
        button:hover {
            background-color: #27834f;
        }
    </style>
</head>
<body>

    <main>
        <h1>Administration Panel - Users</h1>
        
        <h2>Registered User</h2>
        <table>
            <thead>
                <tr>
                    <th>User ID</th>
                    <th>Email</th>
                    <th>Accions</th>
                </tr>
            </thead>
            <tbody id="userList">
                
            </tbody>
        </table>
    </main>

    
    <script>
      
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = import.meta.env.SUPABASE_URL;
const supabaseKey = import.meta.env.SUPABASE_KEY;

export const supabase = createClient(supabaseUrl, supabaseKey);
        

        
        async function checkAdmin() {
            const { data: { user }, error } = await supabase.auth.getUser(); 
            if (error || !user) {
                alert("You have login.");
                window.location.href = '/login.html'; 
            } else {
                
                console.log('User Autenticated:', user);
                fetchUsers(); 
            }
        }

        function fetchUsers() {
            const userList = document.getElementById('userList');
            
            if (!userList) {
                console.error("No found 'userList'.");
                return;
            }

           
            const users = [
                { id: '1', email: 'user1@example.com' },
                { id: '2', email: 'user2@example.com' },
                { id: '3', email: 'user3@example.com' }
            ];

            userList.innerHTML = ''; 

            if (users.length === 0) {
                userList.innerHTML = "<tr><td colspan='3'>No hay usuarios registrados.</td></tr>";
                return;
            }

          
            users.forEach(user => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${user.id}</td>
                    <td>${user.email}</td>
                    <td><button onclick="deleteUser('${user.id}')">Eliminar</button></td>
                `;
                userList.appendChild(row);
            });
        }

       
        async function deleteUser(userId:any) {
            
            if (!userId) {
                console.error("El ID de usuario es inválido");
                return;
            }

            if (confirm("¿Estás seguro de que quieres eliminar este usuario?")) {
                alert(`Usuario con ID ${userId} eliminado.`); 
                console.log(`Usuario con ID ${userId} eliminado desde la lógica de backend`);
            }
        }

        
        checkAdmin();
    </script>

</body>
</html>
