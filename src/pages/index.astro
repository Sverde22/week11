---
import Layout from '../layouts/Layout.astro';
import Navigation from '../components/Navigation.astro';
import { supabase } from '../lib/supabase';

let title = '';
let content = '';
let posts = [];

// Función para cargar los posts desde Supabase
async function loadPosts() {
  const { data, error } = await supabase
    .from('posts')
    .select('*')
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error al cargar los posts:', error.message);
  } else {
    posts = data;
  }
}

// Función para crear un nuevo post
async function handleSubmit(event: any) {
  event.preventDefault();

  // Insertar el nuevo post en Supabase
  const { data, error } = await supabase
    .from('posts')
    .insert([{ title, content }]);

  if (error) {
    alert('Error al crear el post: ' + error.message);
  } else {
    alert('Post creado exitosamente');
    title = '';
    content = '';
    loadPosts(); // Recargar los posts después de crear uno
  }
}

// Función para eliminar un post
async function deletePost(postId: any) {
  const { error } = await supabase
    .from('posts')
    .delete()
    .eq('id', postId);

  if (error) {
    alert('Error al eliminar el post: ' + error.message);
  } else {
    alert('Post eliminado exitosamente');
    loadPosts(); // Recargar los posts después de eliminar uno
  }
}

// Cargar los posts al cargar la página
loadPosts();
---


<Layout>
	<Navigation />
  
	<!-- Page Heading -->
	<h1>
	  Welcome to week 10 of Web Frameworks, here's a demo on how to login and register
	</h1>
  </Layout>

  <!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Blog with Supabase</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f4f4f4;
    }
    main {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    form {
      display: flex;
      flex-direction: column;
    }
    label {
      margin: 10px 0 5px;
    }
    input, textarea {
      padding: 8px;
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    button {
      padding: 10px;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    button:hover {
      background-color: #45a049;
    }
    .post {
      background-color: #fff;
      padding: 15px;
      margin-bottom: 10px;
      border-radius: 4px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .post h2 {
      margin-top: 0;
    }
    .delete-button {
      background-color: #f44336;
      color: white;
      border: none;
      padding: 5px 10px;
      cursor: pointer;
      border-radius: 4px;
    }
    .delete-button:hover {
      background-color: #e53935;
    }
  </style>
</head>
<body>
  <main>
    <h1>Create a New Post</h1>
    
    <form id="postForm">
      <label for="title">Post Title</label>
      <input
        type="text"
        id="title"
        name="title"
        required
        value={title}
        oninput="title = this.value"
      />
      
      <label for="content">Content</label>
      <textarea
        id="content"
        name="content"
        required
        value={content}
        oninput="content = this.value"
      ></textarea>
      
      <button type="submit">Create Post</button>
    </form>

    <h2>Published Posts</h2>
    <div id="posts"></div>
  </main>

  <script type="module">

  
import { createClient } from '@supabase/supabase-js'
const supabaseUrl = 'https://ltpzegtftlbobkisvarr.supabase.co'
const supabaseKey = process.env.SUPABASE_KEY
const supabase = createClient(supabaseUrl, supabaseKey)

    const form = document.getElementById('postForm');
    const postsContainer = document.getElementById('posts');

    // Load posts when the page is loaded
    async function loadPosts() {
      const { data, error } = await supabase
        .from('posts')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error loading posts:', error.message);
      } else {
        postsContainer.innerHTML = ''; // Clear existing posts
        data.forEach(post => {
          const postElement = document.createElement('div');
          postElement.classList.add('post');
          postElement.innerHTML = `
            <h2>${post.title}</h2>
            <p>${post.content}</p>
            <button class="delete-button" data-id="${post.id}">Delete</button>
          `;
          postsContainer.appendChild(postElement);
        });
      }
    }

    // Handle form submission to create a post
    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      const title = form.title.value;
      const content = form.content.value;

      if (!title || !content) {
        alert('Please complete all fields.');
        return;
      }

      const { data, error } = await supabase
        .from('posts')
        .insert([{ title, content }]);

      if (error) {
        alert('Error creating post: ' + error.message);
      } else {
        alert('Post created successfully');
        form.reset(); // Reset form fields
        loadPosts(); // Reload posts after creating one
      }
    });

    // Handle delete post actions
    postsContainer.addEventListener('click', async (event) => {
      if (event.target.classList.contains('delete-button')) {
        const postId = event.target.getAttribute('data-id');

        const { error } = await supabase
          .from('posts')
          .delete()
          .eq('id', postId);

        if (error) {
          alert('Error deleting post: ' + error.message);
        } else {
          alert('Post deleted successfully');
          loadPosts(); // Reload posts after deleting one
        }
      }
    });

    // Load posts on page load
    loadPosts();
  </script>
</body>
</html>